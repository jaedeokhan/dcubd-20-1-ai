{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled12.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPheQOTvfagESJ54BLLmzUH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jaedeokhan/20_1_AI_Introduce/blob/master/pratice/0428_news_articles\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_LpBtH0baxG5",
        "colab_type": "text"
      },
      "source": [
        "### 2020 0428 TUE 뉴스 기사 분류 : 다중 분류 문제"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mQ9e8mZEasEA",
        "colab_type": "text"
      },
      "source": [
        "#### 3-12 로이터 데이터셋 로드하기\n",
        "* 46 개의 상호 배타적인 토픽으로 분류하는 신경망을 만들어보는 예제\n",
        "* 클래스가 많기에 다중 분류(multiclass classfication)\n",
        "* 각 데이터 포인터가 정확히 하나의 범주로 표현되기 때문에 단일 레이블 다중 분류(single-label, multiclass classfication)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i4KgtYk1aul9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "74d78042-767a-4f80-9931-1e1651f41aab"
      },
      "source": [
        "pip install tensorflow_gpu==2.0"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting tensorflow_gpu==2.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/25/44/47f0722aea081697143fbcf5d2aa60d1aee4aaacb5869aee2b568974777b/tensorflow_gpu-2.0.0-cp36-cp36m-manylinux2010_x86_64.whl (380.8MB)\n",
            "\u001b[K     |████████████████████████████████| 380.8MB 44kB/s \n",
            "\u001b[?25hRequirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (0.34.2)\n",
            "Requirement already satisfied: google-pasta>=0.1.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (0.2.0)\n",
            "Collecting gast==0.2.2\n",
            "  Downloading https://files.pythonhosted.org/packages/4e/35/11749bf99b2d4e3cceb4d55ca22590b0d7c2c62b9de38ac4a4a7f4687421/gast-0.2.2.tar.gz\n",
            "Requirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (0.8.1)\n",
            "Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (1.18.3)\n",
            "Requirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (0.9.0)\n",
            "Requirement already satisfied: wrapt>=1.11.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (1.12.1)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (1.12.0)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (3.2.1)\n",
            "Collecting tensorboard<2.1.0,>=2.0.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/76/54/99b9d5d52d5cb732f099baaaf7740403e83fe6b0cedde940fabd2b13d75a/tensorboard-2.0.2-py3-none-any.whl (3.8MB)\n",
            "\u001b[K     |████████████████████████████████| 3.8MB 43.4MB/s \n",
            "\u001b[?25hRequirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (1.28.1)\n",
            "Requirement already satisfied: keras-applications>=1.0.8 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (1.0.8)\n",
            "Collecting tensorflow-estimator<2.1.0,>=2.0.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/fc/08/8b927337b7019c374719145d1dceba21a8bb909b93b1ad6f8fb7d22c1ca1/tensorflow_estimator-2.0.1-py2.py3-none-any.whl (449kB)\n",
            "\u001b[K     |████████████████████████████████| 450kB 42.2MB/s \n",
            "\u001b[?25hRequirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (3.10.0)\n",
            "Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (1.1.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow_gpu==2.0) (1.1.0)\n",
            "Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (1.0.1)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (2.21.0)\n",
            "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (0.4.1)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (3.2.1)\n",
            "Requirement already satisfied: google-auth<2,>=1.6.3 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (1.7.2)\n",
            "Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.6/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (46.1.3)\n",
            "Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras-applications>=1.0.8->tensorflow_gpu==2.0) (2.10.0)\n",
            "Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (2.8)\n",
            "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (2020.4.5.1)\n",
            "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3,>=2.21.0->tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (1.24.3)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.6/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (1.3.0)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (0.2.8)\n",
            "Requirement already satisfied: rsa<4.1,>=3.1.4 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (4.0)\n",
            "Requirement already satisfied: cachetools<3.2,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (3.1.1)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (3.1.0)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.6/dist-packages (from pyasn1-modules>=0.2.1->google-auth<2,>=1.6.3->tensorboard<2.1.0,>=2.0.0->tensorflow_gpu==2.0) (0.4.8)\n",
            "Building wheels for collected packages: gast\n",
            "  Building wheel for gast (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for gast: filename=gast-0.2.2-cp36-none-any.whl size=7540 sha256=2fb2bd2488c8e859c509538aedb8b5853e6aa292d5ac9c25dabee06fda393b0c\n",
            "  Stored in directory: /root/.cache/pip/wheels/5c/2e/7e/a1d4d4fcebe6c381f378ce7743a3ced3699feb89bcfbdadadd\n",
            "Successfully built gast\n",
            "\u001b[31mERROR: tensorflow 2.2.0rc3 has requirement gast==0.3.3, but you'll have gast 0.2.2 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: tensorflow 2.2.0rc3 has requirement tensorboard<2.3.0,>=2.2.0, but you'll have tensorboard 2.0.2 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: tensorflow 2.2.0rc3 has requirement tensorflow-estimator<2.3.0,>=2.2.0rc0, but you'll have tensorflow-estimator 2.0.1 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: tensorflow-probability 0.10.0rc0 has requirement gast>=0.3.2, but you'll have gast 0.2.2 which is incompatible.\u001b[0m\n",
            "Installing collected packages: gast, tensorboard, tensorflow-estimator, tensorflow-gpu\n",
            "  Found existing installation: gast 0.3.3\n",
            "    Uninstalling gast-0.3.3:\n",
            "      Successfully uninstalled gast-0.3.3\n",
            "  Found existing installation: tensorboard 2.2.1\n",
            "    Uninstalling tensorboard-2.2.1:\n",
            "      Successfully uninstalled tensorboard-2.2.1\n",
            "  Found existing installation: tensorflow-estimator 2.2.0\n",
            "    Uninstalling tensorflow-estimator-2.2.0:\n",
            "      Successfully uninstalled tensorflow-estimator-2.2.0\n",
            "Successfully installed gast-0.2.2 tensorboard-2.0.2 tensorflow-estimator-2.0.1 tensorflow-gpu-2.0.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VjDb0LZMautT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 70
        },
        "outputId": "4251ba48-4e90-4fad-fd31-4453f861e45e"
      },
      "source": [
        "from keras.datasets import reuters\n",
        "\n",
        "(train_data, train_labels), (test_data, test_labels) = reuters.load_data(num_words=10000)"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://s3.amazonaws.com/text-datasets/reuters.npz\n",
            "2113536/2110848 [==============================] - 1s 0us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8SrhkW2dau0G",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "f038a363-42be-4946-a556-6257793d42ea"
      },
      "source": [
        "print (len(train_data))\n",
        "print (len(test_data))\n",
        "print (train_data[0])"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "8982\n",
            "2246\n",
            "[1, 2, 2, 8, 43, 10, 447, 5, 25, 207, 270, 5, 3095, 111, 16, 369, 186, 90, 67, 7, 89, 5, 19, 102, 6, 19, 124, 15, 90, 67, 84, 22, 482, 26, 7, 48, 4, 49, 8, 864, 39, 209, 154, 6, 151, 6, 83, 11, 15, 22, 155, 11, 15, 7, 48, 9, 4579, 1005, 504, 6, 258, 6, 272, 11, 15, 22, 134, 44, 11, 15, 16, 8, 197, 1245, 90, 67, 52, 29, 209, 30, 32, 132, 6, 109, 15, 17, 12]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UowMzbcyau6n",
        "colab_type": "text"
      },
      "source": [
        "#### 3-13 로이터 데이터셋을 텍스트로 디코딩하기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w54gOEOTavAw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "b92f953a-878b-4443-dc25-ef8595912234"
      },
      "source": [
        "word_index = reuters.get_word_index()\n",
        "reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n",
        "decoded_neswire = ' '.join([reverse_word_index.get(i - 3, '?') for i in train_data[0]])\n",
        "# 0,1,2 '패딩', '문서 시작', '사전에 없음'을 위한 인덱스이므로 3을 뺀다."
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://s3.amazonaws.com/text-datasets/reuters_word_index.json\n",
            "557056/550378 [==============================] - 0s 1us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BQzI78aTavG5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "b98b087c-5c78-4f37-c1fc-56c601f2b6cb"
      },
      "source": [
        "print (train_labels[10])"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HvYFCWnYavMh",
        "colab_type": "text"
      },
      "source": [
        "### 3.5.2 데이터 준비\n",
        "#### 3-14 데이터 인코딩하기\n",
        "* 원-핫 인코딩이 범주형 데이터에 널리 사용되기 때문에 범주형 인코딩(categorical encoding)이라고 부른다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0Lj7Y5sJavSf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "def vectorize_sequences(sequences, dimension=10000):\n",
        "    results = np.zeros((len(sequences), dimension))\n",
        "    for i, sequence in enumerate(sequences):\n",
        "        # i번째부터, 해당되는 위치\n",
        "        results[i, sequence] = 1.\n",
        "    return results\n",
        "\n",
        "x_train = vectorize_sequences(train_data) # 훈련 데이터 벡터 변환\n",
        "x_test =  vectorize_sequences(test_data)  # 테스트 데이터 벡터 변환\n",
        "\n",
        "'''\n",
        "'''\n",
        "\n",
        "'''\n",
        "# MNIST 예제에서 이미 보았듯이 케라스에서는 이를 위한 내장 함수가 존재한다.\n",
        "from keras.utils.np_utils import to_categorical\n",
        "\n",
        "one_hot_train_labels = to_categorical(train_labels)\n",
        "one_hot_test_labels = to_categorical(test_labels)\n",
        "'''"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bPv2bgiWggJ4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def to_one_hot(labels, dimension=46):\n",
        "    results = np.zeros((len(labels), dimension))\n",
        "    for i, label in enumerate(labels):\n",
        "        results[i, label] = 1.\n",
        "    return results\n",
        "\n",
        "one_hot_train_labels = to_one_hot(train_labels)\n",
        "one_hot_test_labels = to_one_hot(test_labels)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TY4qNT5LghJU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 266
        },
        "outputId": "a6fa9693-8ce7-43ae-c673-96aa5b86ddfa"
      },
      "source": [
        "print (one_hot_train_labels)\n",
        "print (one_hot_test_labels)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " ...\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]]\n",
            "[[0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 1. 0. ... 0. 0. 0.]\n",
            " ...\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]\n",
            " [0. 0. 0. ... 0. 0. 0.]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fMS5UuHYavY8",
        "colab_type": "text"
      },
      "source": [
        "### 3.5.3 모델 구성\n",
        "\n",
        "#### 3-15 모델 정의하기\n",
        "* 출력 클래스의 개수가 2에서 46개로 늘어났다.\n",
        "* 16차원 공간을 사용하면 46개의 클래스를 구분하기에는 제약이 너무 많다. 규모가 작은 층은 유용한 정보를 완전히 잃게 되는 정보의 병목 이 될 수 있다.\n",
        "* 64개의 유닛을 사용"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sC_pdWX0fZxM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "model.add(layers.Dense(46, activation='softmax'))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bxMZ_LdDeD06",
        "colab_type": "text"
      },
      "source": [
        "#### 3-16 모델 컴파일하기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PZvQrHJFeD8p",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model.compile(optimizer='rmsprop',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy'])"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f2zGMDsoeEDu",
        "colab_type": "text"
      },
      "source": [
        "### 3.5.4 훈련 검증\n",
        "* 훈련 데이터에서 1000개의 샘플을 따로 떼어서 검증 세트로 사용\n",
        "\n",
        "#### 3-17 검증 세트 준비하기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NJS7_7rBeESL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x_val = x_train[:1000]\n",
        "partial_x_train = x_train[1000:]\n",
        "\n",
        "y_val = one_hot_train_labels[:1000]\n",
        "partial_y_train = one_hot_train_labels[1000:]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z1-1_1lleEZM",
        "colab_type": "text"
      },
      "source": [
        "#### 3-18 모델 훈련하기\n",
        "* 20 epochs"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5G9CL0WqeEf2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 766
        },
        "outputId": "4614ceff-57cc-408d-943b-c3013f119f8b"
      },
      "source": [
        "history = model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=20,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/20\n",
            "7982/7982 [==============================] - 2s 233us/step - loss: 2.6374 - accuracy: 0.5045 - val_loss: 1.7356 - val_accuracy: 0.6610\n",
            "Epoch 2/20\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 1.4097 - accuracy: 0.7125 - val_loss: 1.2869 - val_accuracy: 0.7180\n",
            "Epoch 3/20\n",
            "7982/7982 [==============================] - 1s 67us/step - loss: 1.0353 - accuracy: 0.7871 - val_loss: 1.1238 - val_accuracy: 0.7600\n",
            "Epoch 4/20\n",
            "7982/7982 [==============================] - 1s 67us/step - loss: 0.8185 - accuracy: 0.8334 - val_loss: 1.0427 - val_accuracy: 0.7850\n",
            "Epoch 5/20\n",
            "7982/7982 [==============================] - 1s 67us/step - loss: 0.6605 - accuracy: 0.8685 - val_loss: 0.9787 - val_accuracy: 0.7950\n",
            "Epoch 6/20\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.5308 - accuracy: 0.8908 - val_loss: 0.9331 - val_accuracy: 0.8120\n",
            "Epoch 7/20\n",
            "7982/7982 [==============================] - 1s 67us/step - loss: 0.4305 - accuracy: 0.9119 - val_loss: 0.9699 - val_accuracy: 0.7900\n",
            "Epoch 8/20\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.3536 - accuracy: 0.9253 - val_loss: 0.9029 - val_accuracy: 0.8190\n",
            "Epoch 9/20\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.2921 - accuracy: 0.9381 - val_loss: 0.9203 - val_accuracy: 0.8190\n",
            "Epoch 10/20\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.2477 - accuracy: 0.9431 - val_loss: 0.9331 - val_accuracy: 0.8170\n",
            "Epoch 11/20\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.2141 - accuracy: 0.9484 - val_loss: 0.9471 - val_accuracy: 0.8210\n",
            "Epoch 12/20\n",
            "7982/7982 [==============================] - 1s 67us/step - loss: 0.1880 - accuracy: 0.9516 - val_loss: 1.0247 - val_accuracy: 0.8020\n",
            "Epoch 13/20\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.1716 - accuracy: 0.9534 - val_loss: 0.9671 - val_accuracy: 0.8140\n",
            "Epoch 14/20\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.1550 - accuracy: 0.9534 - val_loss: 1.0173 - val_accuracy: 0.8040\n",
            "Epoch 15/20\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.1467 - accuracy: 0.9539 - val_loss: 1.0363 - val_accuracy: 0.8130\n",
            "Epoch 16/20\n",
            "7982/7982 [==============================] - 1s 67us/step - loss: 0.1323 - accuracy: 0.9565 - val_loss: 1.0322 - val_accuracy: 0.8080\n",
            "Epoch 17/20\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.1291 - accuracy: 0.9585 - val_loss: 1.0334 - val_accuracy: 0.8230\n",
            "Epoch 18/20\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.1212 - accuracy: 0.9589 - val_loss: 1.1060 - val_accuracy: 0.8010\n",
            "Epoch 19/20\n",
            "7982/7982 [==============================] - 1s 63us/step - loss: 0.1208 - accuracy: 0.9562 - val_loss: 1.0648 - val_accuracy: 0.8180\n",
            "Epoch 20/20\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.1147 - accuracy: 0.9574 - val_loss: 1.1001 - val_accuracy: 0.8120\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VGcUYnwjeEmk",
        "colab_type": "text"
      },
      "source": [
        "#### 3-19 훈련과 검증 손실 그리기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1iMkPFoBeEtO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "416933c4-8b6c-4ff9-9a8f-57410b985fa4"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss) + 1)\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label=\"Training loss\")\n",
        "plt.plot(epochs, val_loss, 'b', label=\"Validation loss\")\n",
        "plt.title(\"Training and Validation loss\")\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QtdXlpskeE0K",
        "colab_type": "text"
      },
      "source": [
        "#### 3-20 훈련과 검증 정확도 그리기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gd1gEcKHeE6c",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "7b4bc999-2f6b-415a-9aa5-b24a1afa5f3e"
      },
      "source": [
        "plt.clf() # 그래프를 초기화한다.\n",
        "\n",
        "acc = history.history['accuracy']\n",
        "val_acc = history.history['val_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss) + 1)\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label=\"Training acc\")\n",
        "plt.plot(epochs, val_acc, 'b', label=\"Validation acc\")\n",
        "plt.title(\"Training and validaiton accuracy\")\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2zq3uRacjbjZ",
        "colab_type": "text"
      },
      "source": [
        "#### 3-21 모델을 처음부터 다시 훈련하기\n",
        "* 이 모델은 9 번째 epochs 이후부터 과대적합이 시작된다. 그래서 9번의 epochs 로 새로운 모델을 훈련하고 테스트 세트에서 평가한다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v4L1g_lij0zk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 392
        },
        "outputId": "59dbed1e-87c8-4d85-bc09-b6c8b1b5868d"
      },
      "source": [
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "results = model.evaluate(x_test, one_hot_test_labels)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 79us/step - loss: 2.5917 - accuracy: 0.4999 - val_loss: 1.7421 - val_accuracy: 0.6200\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 1.4203 - accuracy: 0.6971 - val_loss: 1.3128 - val_accuracy: 0.7160\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 1.0507 - accuracy: 0.7692 - val_loss: 1.1461 - val_accuracy: 0.7500\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.8321 - accuracy: 0.8193 - val_loss: 1.0479 - val_accuracy: 0.7810\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.6692 - accuracy: 0.8527 - val_loss: 0.9704 - val_accuracy: 0.8020\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.5408 - accuracy: 0.8832 - val_loss: 0.9439 - val_accuracy: 0.8020\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.4319 - accuracy: 0.9069 - val_loss: 0.9142 - val_accuracy: 0.8120\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.3517 - accuracy: 0.9262 - val_loss: 0.9031 - val_accuracy: 0.8140\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.2874 - accuracy: 0.9379 - val_loss: 0.9311 - val_accuracy: 0.8090\n",
            "2246/2246 [==============================] - 0s 116us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9kicV3kLj04Y",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "5de3b59c-9f35-4ca9-80fe-3cfef2d9f662"
      },
      "source": [
        "print (results)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1.0344674621218566, 0.7724844217300415]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qhPaT5cnj0-M",
        "colab_type": "text"
      },
      "source": [
        "* 무작위로 불균형한 데이터셋 사용"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4MSLY81Jj1DZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "74f7660f-6e81-477d-fb2f-15bfae6d1d05"
      },
      "source": [
        "import copy\n",
        "test_labels_copy = copy.copy(test_labels)\n",
        "np.random.shuffle(test_labels_copy)\n",
        "hist_array = np.array(test_labels) == np.array(test_labels_copy)\n",
        "float(np.sum(hist_array)) / len(test_labels)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.19100623330365094"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SxVaheqpj1jy",
        "colab_type": "text"
      },
      "source": [
        "### 3.5.5 새로운 데이터에 대해 예측하기\n",
        "#### 3-22 새로운 데이터에 대해 예측"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V70OjiSKj1p1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "predictions = model.predict(x_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WEy__5AFluNF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "outputId": "144f7131-3efc-4873-e1f0-b1e7b2794dc6"
      },
      "source": [
        "print (predictions)               # \n",
        "print (predictions[0].shape)      # 각 항목의 길이가 46인 벡터\n",
        "print (np.sum(predictions[0]))    # 벡터의 원소 합은 1\n",
        "print (np.argmax(predictions[0])) # 가장 확룔이 높은 클래스"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[2.5499949e-06 1.0498771e-05 4.8400852e-05 ... 4.4863737e-05\n",
            "  9.0587224e-07 4.3972540e-07]\n",
            " [3.6480897e-03 2.1713057e-01 9.6261682e-04 ... 2.0746500e-04\n",
            "  6.6254041e-05 2.1127209e-05]\n",
            " [3.0375342e-03 6.9701010e-01 9.0369899e-03 ... 9.6729980e-04\n",
            "  2.2199731e-03 8.4198068e-04]\n",
            " ...\n",
            " [5.0532792e-05 4.5571098e-05 6.2553518e-05 ... 5.2780084e-05\n",
            "  3.5636056e-06 1.8712850e-05]\n",
            " [1.0984907e-03 1.6972709e-02 1.4073986e-03 ... 7.1402948e-04\n",
            "  2.2308019e-04 2.2225011e-04]\n",
            " [5.0566049e-04 4.8348969e-01 2.6190002e-02 ... 3.7717648e-04\n",
            "  1.2265323e-03 4.1489018e-04]]\n",
            "(46,)\n",
            "1.0000001\n",
            "3\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eiSu3SVzj1wC",
        "colab_type": "text"
      },
      "source": [
        "### 3.5.6 레이블과 손실을 다루는 다른 방법\n",
        "* 레이블을 인코딩하는 다른 방법으 정수 텐서로 변환하는 것이다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "laEjqYLFj12H",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GfFSKtyCj18i",
        "colab_type": "text"
      },
      "source": [
        "### 3.5.7 충분히 큰 중간층을 두어야 하는 이유\n",
        "#### 3-23 정보 병목이 있는 모델\n",
        "* 중간층을 46층 보다 적은 4로 수행을 한다면? 정보 손실이 일어난다.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6ZAZTishj2Cf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 392
        },
        "outputId": "17af24ce-b38c-4450-89ab-0061910a40e5"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(4, activation='relu'))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "results = model.evaluate(x_test, one_hot_test_labels)"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 73us/step - loss: 3.2334 - accuracy: 0.1629 - val_loss: 2.7600 - val_accuracy: 0.5350\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 2.4841 - accuracy: 0.5869 - val_loss: 2.2509 - val_accuracy: 0.5910\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 2.0339 - accuracy: 0.6109 - val_loss: 1.9508 - val_accuracy: 0.5960\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 1.7569 - accuracy: 0.6200 - val_loss: 1.7700 - val_accuracy: 0.6000\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 1.5772 - accuracy: 0.6294 - val_loss: 1.6589 - val_accuracy: 0.5980\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 1.4474 - accuracy: 0.6348 - val_loss: 1.5818 - val_accuracy: 0.6130\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 1.3421 - accuracy: 0.6723 - val_loss: 1.5217 - val_accuracy: 0.6520\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 1.2525 - accuracy: 0.6937 - val_loss: 1.4787 - val_accuracy: 0.6550\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 1.1776 - accuracy: 0.7060 - val_loss: 1.4578 - val_accuracy: 0.6590\n",
            "2246/2246 [==============================] - 0s 105us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aPuFXVRPnGZZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "63376080-22f1-430e-d480-81b19759da8c"
      },
      "source": [
        "print (results)"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1.5287529207825767, 0.642920732498169]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h31mVAP4m9vX",
        "colab_type": "text"
      },
      "source": [
        "### 3.5.8 추가 실험\n",
        "* 더 크거나 작은 층을 사용하기 = 32개의 유닛, 128개의 유닛\n",
        "* 여기에서 2개의 은닉 층을 사용했다. 1개나 3개의 은닉층을 사용해보기\n",
        "* batch_size 도 바꿔보기"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wSNx-YENnvh6",
        "colab_type": "text"
      },
      "source": [
        "#### 32개의 유닛 사용!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YFVoMrX3m90r",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "9ce83076-5da9-45ad-fa51-ab1912fa70d4"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(32, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(32, activation='relu'))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "results_32_units = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(results_32_units)"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 72us/step - loss: 3.1885 - accuracy: 0.4644 - val_loss: 2.4417 - val_accuracy: 0.5900\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 1.9973 - accuracy: 0.6483 - val_loss: 1.7427 - val_accuracy: 0.6350\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 0s 63us/step - loss: 1.4743 - accuracy: 0.7023 - val_loss: 1.4415 - val_accuracy: 0.6930\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 1.1946 - accuracy: 0.7408 - val_loss: 1.2765 - val_accuracy: 0.7150\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 63us/step - loss: 1.0087 - accuracy: 0.7811 - val_loss: 1.1858 - val_accuracy: 0.7460\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.8679 - accuracy: 0.8121 - val_loss: 1.1142 - val_accuracy: 0.7670\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 0s 62us/step - loss: 0.7509 - accuracy: 0.8405 - val_loss: 1.0606 - val_accuracy: 0.7810\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.6499 - accuracy: 0.8574 - val_loss: 1.0333 - val_accuracy: 0.7880\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.5618 - accuracy: 0.8766 - val_loss: 1.0015 - val_accuracy: 0.7880\n",
            "2246/2246 [==============================] - 0s 115us/step\n",
            "[1.0621824279387722, 0.7680320739746094]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hu3rG-yToLrN",
        "colab_type": "text"
      },
      "source": [
        "#### 64 개의 유닛 사용!!\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jA5Fsm2KoLCC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "153eed34-390d-4fee-e63b-844c2140e3c6"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "result_64_units = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(result_64_units)"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 73us/step - loss: 2.7924 - accuracy: 0.5132 - val_loss: 1.8502 - val_accuracy: 0.6310\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 63us/step - loss: 1.4716 - accuracy: 0.7043 - val_loss: 1.3249 - val_accuracy: 0.7140\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 1.0573 - accuracy: 0.7744 - val_loss: 1.1535 - val_accuracy: 0.7420\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 63us/step - loss: 0.8201 - accuracy: 0.8270 - val_loss: 1.0418 - val_accuracy: 0.7730\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.6503 - accuracy: 0.8624 - val_loss: 0.9643 - val_accuracy: 0.7910\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 63us/step - loss: 0.5182 - accuracy: 0.8909 - val_loss: 0.9154 - val_accuracy: 0.8000\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.4183 - accuracy: 0.9128 - val_loss: 0.9147 - val_accuracy: 0.7970\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 0s 62us/step - loss: 0.3421 - accuracy: 0.9268 - val_loss: 0.8875 - val_accuracy: 0.8140\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.2829 - accuracy: 0.9361 - val_loss: 0.8905 - val_accuracy: 0.8100\n",
            "2246/2246 [==============================] - 0s 106us/step\n",
            "[0.9746373907753324, 0.7871772050857544]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f9sXQCSLm95z",
        "colab_type": "text"
      },
      "source": [
        "#### 128 개의 유닛 사용!!m"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OnMLtAC4m9_E",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "d9e60fac-ee13-4f7c-d1ba-5f8eab192929"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(128, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(128, activation='relu'))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "result_128_units = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(result_128_units)"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 75us/step - loss: 2.2787 - accuracy: 0.5668 - val_loss: 1.4247 - val_accuracy: 0.6720\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 1.1515 - accuracy: 0.7513 - val_loss: 1.1442 - val_accuracy: 0.7500\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.8103 - accuracy: 0.8302 - val_loss: 0.9689 - val_accuracy: 0.8000\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.5821 - accuracy: 0.8806 - val_loss: 0.9061 - val_accuracy: 0.8030\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.4275 - accuracy: 0.9124 - val_loss: 0.8903 - val_accuracy: 0.8120\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.3249 - accuracy: 0.9313 - val_loss: 0.8852 - val_accuracy: 0.8110\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.2478 - accuracy: 0.9454 - val_loss: 1.0217 - val_accuracy: 0.7850\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.2131 - accuracy: 0.9481 - val_loss: 0.9256 - val_accuracy: 0.8090\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.1810 - accuracy: 0.9505 - val_loss: 0.9474 - val_accuracy: 0.8180\n",
            "2246/2246 [==============================] - 0s 107us/step\n",
            "[1.0498015141763117, 0.7902938723564148]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nt7SdlFcm-E0",
        "colab_type": "text"
      },
      "source": [
        "#### Hidden variables 1개 또는 3개 사용\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IruiRmXVpvsu",
        "colab_type": "text"
      },
      "source": [
        "#### 은닉 계층이 하나, 64"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7zumznLtpxRN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "1a962974-bc26-442e-c187-d9aec2ec7219"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "result_hv1_64_units = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(result_hv1_64_units)"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 73us/step - loss: 2.5614 - accuracy: 0.5639 - val_loss: 1.8104 - val_accuracy: 0.6580\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 1.4734 - accuracy: 0.7176 - val_loss: 1.3520 - val_accuracy: 0.7200\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 1.0745 - accuracy: 0.7818 - val_loss: 1.1376 - val_accuracy: 0.7630\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.8372 - accuracy: 0.8326 - val_loss: 1.0166 - val_accuracy: 0.7930\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.6734 - accuracy: 0.8677 - val_loss: 0.9499 - val_accuracy: 0.7940\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.5491 - accuracy: 0.8900 - val_loss: 0.8854 - val_accuracy: 0.8170\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.4513 - accuracy: 0.9094 - val_loss: 0.8657 - val_accuracy: 0.8220\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.3754 - accuracy: 0.9221 - val_loss: 0.8412 - val_accuracy: 0.8240\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.3158 - accuracy: 0.9340 - val_loss: 0.8336 - val_accuracy: 0.8260\n",
            "2246/2246 [==============================] - 0s 113us/step\n",
            "[0.8987422755862174, 0.7947462201118469]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_bZP1AJtpxYZ",
        "colab_type": "text"
      },
      "source": [
        "#### 은닉 변수 1, 32 유닛"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O0Bj3gtvm-J9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "a268ee19-d7a2-40b8-e85f-18e297324bbe"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(32, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "result_hv1_32_units = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(result_hv1_32_units)"
      ],
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 69us/step - loss: 2.9204 - accuracy: 0.4999 - val_loss: 2.2487 - val_accuracy: 0.6150\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 63us/step - loss: 1.9114 - accuracy: 0.6574 - val_loss: 1.7139 - val_accuracy: 0.6640\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 63us/step - loss: 1.4596 - accuracy: 0.7160 - val_loss: 1.4224 - val_accuracy: 0.6960\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 1.1805 - accuracy: 0.7601 - val_loss: 1.2441 - val_accuracy: 0.7340\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 63us/step - loss: 0.9912 - accuracy: 0.7995 - val_loss: 1.1280 - val_accuracy: 0.7630\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.8508 - accuracy: 0.8299 - val_loss: 1.0539 - val_accuracy: 0.7870\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 63us/step - loss: 0.7400 - accuracy: 0.8562 - val_loss: 0.9943 - val_accuracy: 0.7950\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.6477 - accuracy: 0.8752 - val_loss: 0.9453 - val_accuracy: 0.8060\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.5677 - accuracy: 0.8866 - val_loss: 0.9140 - val_accuracy: 0.8120\n",
            "2246/2246 [==============================] - 0s 108us/step\n",
            "[0.9947529459042095, 0.7804986834526062]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SjTXQJo_pwZ6",
        "colab_type": "text"
      },
      "source": [
        "#### 은닉 1, 128 유닛 => 현재 가장 높음"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uzRR8l07pwfC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "36b02b7a-8609-4f83-bffe-a3f21a2009cc"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(128, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "result_hv1_128_units = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(result_hv1_128_units)"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 75us/step - loss: 2.3152 - accuracy: 0.5947 - val_loss: 1.5035 - val_accuracy: 0.7100\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 1.1534 - accuracy: 0.7742 - val_loss: 1.1120 - val_accuracy: 0.7880\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 68us/step - loss: 0.7885 - accuracy: 0.8454 - val_loss: 0.9607 - val_accuracy: 0.8100\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.5764 - accuracy: 0.8895 - val_loss: 0.8989 - val_accuracy: 0.8090\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.4399 - accuracy: 0.9108 - val_loss: 0.8329 - val_accuracy: 0.8230\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.3421 - accuracy: 0.9297 - val_loss: 0.8445 - val_accuracy: 0.8200\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 67us/step - loss: 0.2768 - accuracy: 0.9410 - val_loss: 0.8110 - val_accuracy: 0.8350\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.2269 - accuracy: 0.9461 - val_loss: 0.8144 - val_accuracy: 0.8280\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 67us/step - loss: 0.1932 - accuracy: 0.9513 - val_loss: 0.8264 - val_accuracy: 0.8330\n",
            "2246/2246 [==============================] - 0s 108us/step\n",
            "[0.9235913999783387, 0.8014247417449951]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jk4XfCnmqXJJ",
        "colab_type": "text"
      },
      "source": [
        "#### 은닉 3, 유닛 32"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HDdKAypMqXAk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "2f4005c6-17c8-4ef4-cdb4-58cc18233d40"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(32, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(32, activation='relu'))\n",
        "model.add(layers.Dense(32, activation='relu'))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "result_hv3_32_units = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(result_hv3_32_units)"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 80us/step - loss: 3.0770 - accuracy: 0.3438 - val_loss: 2.3225 - val_accuracy: 0.4170\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 1.9362 - accuracy: 0.5872 - val_loss: 1.7087 - val_accuracy: 0.6190\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 1.4907 - accuracy: 0.6854 - val_loss: 1.4545 - val_accuracy: 0.6850\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 1.2491 - accuracy: 0.7249 - val_loss: 1.3072 - val_accuracy: 0.7010\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 1.0732 - accuracy: 0.7591 - val_loss: 1.2107 - val_accuracy: 0.7330\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.9196 - accuracy: 0.7950 - val_loss: 1.1357 - val_accuracy: 0.7530\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.7912 - accuracy: 0.8203 - val_loss: 1.0893 - val_accuracy: 0.7620\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.6809 - accuracy: 0.8449 - val_loss: 1.0587 - val_accuracy: 0.7760\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 63us/step - loss: 0.5917 - accuracy: 0.8651 - val_loss: 1.0358 - val_accuracy: 0.7900\n",
            "2246/2246 [==============================] - 0s 113us/step\n",
            "[1.1092696750365723, 0.7551202178001404]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EsZlkB01qWrf",
        "colab_type": "text"
      },
      "source": [
        "#### 은닉 3, 유닛 64"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CSxOsafVqWN6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "be95c717-af08-465a-b487-aa51df2f2847"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "result_hv3_64_units = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(result_hv3_64_units)"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 75us/step - loss: 2.6102 - accuracy: 0.4702 - val_loss: 1.7083 - val_accuracy: 0.6450\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 1.4522 - accuracy: 0.6983 - val_loss: 1.3388 - val_accuracy: 0.7110\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 1.1009 - accuracy: 0.7577 - val_loss: 1.1744 - val_accuracy: 0.7410\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 0s 62us/step - loss: 0.8758 - accuracy: 0.8072 - val_loss: 1.0763 - val_accuracy: 0.7700\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.6840 - accuracy: 0.8482 - val_loss: 1.0342 - val_accuracy: 0.7690\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 0s 62us/step - loss: 0.5504 - accuracy: 0.8767 - val_loss: 0.9810 - val_accuracy: 0.7860\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.4248 - accuracy: 0.9080 - val_loss: 0.9661 - val_accuracy: 0.7970\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 63us/step - loss: 0.3480 - accuracy: 0.9251 - val_loss: 0.9491 - val_accuracy: 0.8010\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.2825 - accuracy: 0.9369 - val_loss: 0.9803 - val_accuracy: 0.8040\n",
            "2246/2246 [==============================] - 0s 116us/step\n",
            "[1.117533819652092, 0.7720391750335693]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0auhyIGtqWCH",
        "colab_type": "text"
      },
      "source": [
        "#### 은닉 3, 유닛 128"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W6YLUF_5qV27",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "28e9bd3c-3f8f-49f7-8fa2-f86b71824407"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(128, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(128, activation='relu'))\n",
        "model.add(layers.Dense(128, activation='relu'))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "result_hv3_128_units = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(result_hv3_128_units)"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 77us/step - loss: 2.2742 - accuracy: 0.4975 - val_loss: 1.4225 - val_accuracy: 0.6700\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 1.1581 - accuracy: 0.7439 - val_loss: 1.1327 - val_accuracy: 0.7380\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.8229 - accuracy: 0.8185 - val_loss: 1.0423 - val_accuracy: 0.7680\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.6029 - accuracy: 0.8647 - val_loss: 0.9441 - val_accuracy: 0.8180\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.4107 - accuracy: 0.9132 - val_loss: 0.9879 - val_accuracy: 0.7950\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.3594 - accuracy: 0.9194 - val_loss: 0.9443 - val_accuracy: 0.8150\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 67us/step - loss: 0.2487 - accuracy: 0.9422 - val_loss: 1.0091 - val_accuracy: 0.8070\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.2209 - accuracy: 0.9458 - val_loss: 0.9732 - val_accuracy: 0.8240\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.1784 - accuracy: 0.9519 - val_loss: 1.1246 - val_accuracy: 0.7850\n",
            "2246/2246 [==============================] - 0s 130us/step\n",
            "[1.2711272084702367, 0.7662510871887207]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fu055LUnm-N_",
        "colab_type": "text"
      },
      "source": [
        "#### batch_size = 512"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1yTvFp1co_kU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "ae6591e2-f890-4ef5-fdd1-e4a18e378acb"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(128, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=512,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "result_hv1_128_units_b512 = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(result_hv1_128_units_b512)"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 72us/step - loss: 2.2073 - accuracy: 0.5918 - val_loss: 1.4428 - val_accuracy: 0.6970\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 1.1137 - accuracy: 0.7762 - val_loss: 1.1076 - val_accuracy: 0.7690\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.7712 - accuracy: 0.8472 - val_loss: 0.9596 - val_accuracy: 0.8050\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.5677 - accuracy: 0.8915 - val_loss: 0.8840 - val_accuracy: 0.8110\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 0s 63us/step - loss: 0.4337 - accuracy: 0.9129 - val_loss: 0.8444 - val_accuracy: 0.8270\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.3383 - accuracy: 0.9313 - val_loss: 0.8221 - val_accuracy: 0.8240\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.2733 - accuracy: 0.9410 - val_loss: 0.8145 - val_accuracy: 0.8250\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.2253 - accuracy: 0.9474 - val_loss: 0.8401 - val_accuracy: 0.8210\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.1937 - accuracy: 0.9499 - val_loss: 0.8273 - val_accuracy: 0.8250\n",
            "2246/2246 [==============================] - 0s 107us/step\n",
            "[0.9260880779392042, 0.7987533211708069]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "amo4lV7Wo_rd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_olvNTVYo_yO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "dab9a6e2-13fd-47b1-8fe1-18d3b6348674"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(128, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=256,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "result_hv1_128_units_b256 = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(result_hv1_128_units_b256)"
      ],
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 74us/step - loss: 1.8571 - accuracy: 0.6367 - val_loss: 1.2091 - val_accuracy: 0.7600\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 65us/step - loss: 0.9003 - accuracy: 0.8177 - val_loss: 0.9620 - val_accuracy: 0.8030\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.5918 - accuracy: 0.8810 - val_loss: 0.8644 - val_accuracy: 0.8180\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.4143 - accuracy: 0.9137 - val_loss: 0.8277 - val_accuracy: 0.8230\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.3042 - accuracy: 0.9344 - val_loss: 0.8020 - val_accuracy: 0.8300\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 66us/step - loss: 0.2365 - accuracy: 0.9440 - val_loss: 0.8244 - val_accuracy: 0.8250\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.1951 - accuracy: 0.9478 - val_loss: 0.8267 - val_accuracy: 0.8260\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 64us/step - loss: 0.1699 - accuracy: 0.9509 - val_loss: 0.8688 - val_accuracy: 0.8290\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 63us/step - loss: 0.1523 - accuracy: 0.9544 - val_loss: 0.8759 - val_accuracy: 0.8210\n",
            "2246/2246 [==============================] - 0s 107us/step\n",
            "[1.0089555429966452, 0.8000890612602234]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x2bvZJoro_3_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VrwWoLOvo_9k",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "58208d31-36d7-4929-bc17-638a45dc7b49"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(128, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=128,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "result_hv1_128_units_b128 = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(result_hv1_128_units_b128)"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 80us/step - loss: 1.5915 - accuracy: 0.6837 - val_loss: 1.0569 - val_accuracy: 0.7680\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 73us/step - loss: 0.7500 - accuracy: 0.8434 - val_loss: 0.8583 - val_accuracy: 0.8170\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 74us/step - loss: 0.4677 - accuracy: 0.9022 - val_loss: 0.8027 - val_accuracy: 0.8330\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 73us/step - loss: 0.3163 - accuracy: 0.9320 - val_loss: 0.8086 - val_accuracy: 0.8250\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 74us/step - loss: 0.2411 - accuracy: 0.9429 - val_loss: 0.8375 - val_accuracy: 0.8260\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 73us/step - loss: 0.1991 - accuracy: 0.9464 - val_loss: 0.8786 - val_accuracy: 0.8150\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 74us/step - loss: 0.1726 - accuracy: 0.9526 - val_loss: 0.8835 - val_accuracy: 0.8240\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 73us/step - loss: 0.1525 - accuracy: 0.9544 - val_loss: 0.9612 - val_accuracy: 0.8110\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 74us/step - loss: 0.1431 - accuracy: 0.9553 - val_loss: 0.9707 - val_accuracy: 0.8120\n",
            "2246/2246 [==============================] - 0s 105us/step\n",
            "[1.1556517744531403, 0.7894033789634705]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lcIT5ch9uR7W",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "m"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vgYN44f0uSH1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "outputId": "fcfba721-7851-46ad-d236-f808ec7aa604"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(128, activation='relu', input_shape=(10000, )))\n",
        "model.add(layers.Dense(46, activation='softmax'))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=\"categorical_crossentropy\",\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    partial_x_train,\n",
        "    partial_y_train,\n",
        "    epochs=9,\n",
        "    batch_size=128,\n",
        "    validation_data=(x_val, y_val)\n",
        ")\n",
        "\n",
        "result_hv1_128_units_b128 = model.evaluate(x_test, one_hot_test_labels)\n",
        "print(result_hv1_128_units_b128)"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Train on 7982 samples, validate on 1000 samples\n",
            "Epoch 1/9\n",
            "7982/7982 [==============================] - 1s 85us/step - loss: 1.6646 - accuracy: 0.6800 - val_loss: 1.0872 - val_accuracy: 0.7760\n",
            "Epoch 2/9\n",
            "7982/7982 [==============================] - 1s 76us/step - loss: 0.7614 - accuracy: 0.8395 - val_loss: 0.8806 - val_accuracy: 0.8220\n",
            "Epoch 3/9\n",
            "7982/7982 [==============================] - 1s 72us/step - loss: 0.4683 - accuracy: 0.9015 - val_loss: 0.8080 - val_accuracy: 0.8310\n",
            "Epoch 4/9\n",
            "7982/7982 [==============================] - 1s 73us/step - loss: 0.3209 - accuracy: 0.9318 - val_loss: 0.8042 - val_accuracy: 0.8290\n",
            "Epoch 5/9\n",
            "7982/7982 [==============================] - 1s 72us/step - loss: 0.2402 - accuracy: 0.9432 - val_loss: 0.8487 - val_accuracy: 0.8260\n",
            "Epoch 6/9\n",
            "7982/7982 [==============================] - 1s 72us/step - loss: 0.1960 - accuracy: 0.9484 - val_loss: 0.8810 - val_accuracy: 0.8250\n",
            "Epoch 7/9\n",
            "7982/7982 [==============================] - 1s 74us/step - loss: 0.1735 - accuracy: 0.9544 - val_loss: 0.9049 - val_accuracy: 0.8170\n",
            "Epoch 8/9\n",
            "7982/7982 [==============================] - 1s 72us/step - loss: 0.1524 - accuracy: 0.9536 - val_loss: 0.9604 - val_accuracy: 0.8100\n",
            "Epoch 9/9\n",
            "7982/7982 [==============================] - 1s 74us/step - loss: 0.1425 - accuracy: 0.9564 - val_loss: 0.9395 - val_accuracy: 0.8200\n",
            "2246/2246 [==============================] - 0s 104us/step\n",
            "[1.1038505515135089, 0.7965271472930908]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qztCn503uSNj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6JmmeFVjuSTz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e-F1wyHTuSY1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b047wpnjuSe2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7At0lpOZuSj0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}